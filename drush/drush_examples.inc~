<?php

use Drupal\html_dom_scraper\Helper\SqlQuery;
use Drupal\html_dom_scraper\Helper\simple_html_dom;
use Drupal\html_dom_scraper\Helper\HtmlDomScraperHelper;
Use Drupal\node\Entity\Node;

/**
 * Implements hook_drush_command().
 */
function html_dom_scraper_drush_command() {
  $items = array();
    $items['dom-scraper'] = [
    'description' => 'List all migrations with current status.',
    'options' => [
      'group' => 'A comma-separated list of migration groups to list',
      'tag' => 'Name of the migration tag to list',
      'names-only' => 'Only return names, not all the details (faster)',
    ],
    'arguments' => [
      'migration' => 'Restrict to a comma-separated list of migrations. Optional',
    ],
    'examples' => [
      'migrate-status' => 'Retrieve status for all migrations',
      'migrate-status --group=beer' => 'Retrieve status for all migrations in a given group',
      'migrate-status --tag=user' => 'Retrieve status for all migrations with a given tag',
      'migrate-status --group=beer --tag=user' => 'Retrieve status for all migrations in the beer group and with the user tag',
      'migrate-status beer_term,beer_node' => 'Retrieve status for specific migrations',
    ],
    'drupal dependencies' => ['migrate_tools'],
    'aliases' => ['ds'],
  ];
    
  $items['poem-update'] = [
    'description' => 'List all migrations with current status.',
    'options' => [
      'group' => 'A comma-separated list of migration groups to list',
      'tag' => 'Name of the migration tag to list',
      'names-only' => 'Only return names, not all the details (faster)',
    ],
    'arguments' => [
      'migration' => 'Restrict to a comma-separated list of migrations. Optional',
    ],
    'examples' => [
      'migrate-status' => 'Retrieve status for all migrations',
      'migrate-status --group=beer' => 'Retrieve status for all migrations in a given group',
      'migrate-status --tag=user' => 'Retrieve status for all migrations with a given tag',
      'migrate-status --group=beer --tag=user' => 'Retrieve status for all migrations in the beer group and with the user tag',
      'migrate-status beer_term,beer_node' => 'Retrieve status for specific migrations',
    ],
    'drupal dependencies' => ['migrate_tools'],
    'aliases' => ['poem-update'],
  ];

  return $items;
}

function selectHDSGroupPrompt() {
  $sqlOjbect = new SqlQuery();
  $groupObject = $sqlOjbect->fetchGroups();
  $groupChoices = [];
  foreach ($groupObject as $value) {
    $groupChoices[$value->group_name] = $value->group_name . " [" . $value->number . "]";
  }
  return drush_choice($groupChoices, dt("Choose The Group Name."));
}


function selectHDSFilterPrompt() {
  $sqlOjbect = new SqlQuery();
  $dataObject = $sqlOjbect->fetchAllFilters();
  $choiceList = NULL;
  $itemObject = NULL;
  foreach ($dataObject as $value) {
    $choiceList[$value->id] = $value->name;
  }
  return drush_choice($choiceList, dt("Choose the option from migration interface."));
}

function selectHDSStatusPrompt() {
  $choiceList = [1=>'All', 2=>'Success', 3=>'Failure',4 => 'Blank'];
  return drush_choice($choiceList, dt("Choose the option from migration interface."));
}

function limitHDSFPrompt() {
  $islimit = drush_prompt("Do you want to provide limit", 'yes', true);
  $start = 0;
  $end = 0;
  if ($islimit == 'yes') {
    $start = drush_prompt("Skip count", 0, FALSE);
    $end = drush_prompt("Items count", 100, FALSE);
  }
  return [$start, $end];
}

function getItemsList($groupName, $start, $end) {
  $sqlOjbect  = new SqlQuery();
  $status     = selectHDSStatusPrompt();
  return $sqlOjbect->fetchAllIds($groupName, $start, $end, $status);
}


// get html dom from string
function str_get_html($str, $lowercase=true, $forceTagsClosed=true, $target_charset = DEFAULT_TARGET_CHARSET, $stripRN=true, $defaultBRText=DEFAULT_BR_TEXT, $defaultSpanText=DEFAULT_SPAN_TEXT)
{
    $dom = new simple_html_dom(null, $lowercase, $forceTagsClosed, $target_charset, $stripRN, $defaultBRText, $defaultSpanText);
    if (empty($str) || strlen($str) > MAX_FILE_SIZE)
    {
        $dom->clear();
        return false;
    }
    $dom->load($str, $lowercase, $stripRN);
    return $dom;
}

/**
 * Call back function drush_custom_drush_command_say_hello()
 * The call back function name in the  following format
 *   drush_{module_name}_{item_id_for_command}()
 */
function drush_html_dom_scraper_poem_update(){
   drush_print('Welcome to poem update');
   $preUpdate = drush_prompt("Do you want to upate the pre node", 'yes', true);
   list($start, $length) = limitHDSFPrompt();
   $db = new SqlQuery();
   $nodeIDS = $db->fetchNodePREIds($start, $length,$preUpdate);
   if (count($nodeIDS) > 0) {
    $batch = HtmlPreReplaceBatch($nodeIDS, $preUpdate);
    if ($batch !== NULL) {
    // Initialize the batch.
    batch_set($batch);
    // Start the batch process.
    drush_backend_batch_process();
  }
    
  }
  else {
    drush_log(t('No records found :)'), 'success');
  }

  //fetchNodePREIds
   //$nodeID = drush_prompt("Enter node ID", 152717, FALSE);
   $node =  Node::load($nodeID);
   $old_urls = $node->get('field_old_url')->getValue();
   $siteOldURl = 'http://cert.infoplease';
   
//   if(isset($old_urls[0])){
//   $url = $siteOldURl.$old_urls[0]['value'];
//   try {
//      $page = file_get_contents($url);
//      $dochtml = new DOMDocument();
//      $dochtml->loadHTML($page);
//
//      // gets all DIVs
//      $pres = $dochtml->getElementsByTagName('pre');
//
//      // traverse the object with all DIVs
//      foreach($pres as $pre) {
//        // gets, and outputs the ID and content of each DIV
//        //$id = $pre->getAttribute('id');
//        $url_pre[] = trim(nl2br($pre->nodeValue));
//      }
//      $html = str_get_html($node->body->value);
//      //print_r($node->body->value); die;
//    // find all image with full tag
//      $node_pre = [];
//      foreach ($html->find('.poem') as $e) {
//        $node_pre[] = trim($e->innertext);
//      }
//      if(count($url_pre) == count($node_pre)){
//       $node->body = ['value' =>  str_replace($node_pre,  $url_pre, $node->body->value), 'format' => 'full_html'];
//      }
//      $node->save();
//    }
//    catch (\Exception $e) {      
//      drush_print(t("Can't open the URl : @url.", ['@url' => $url]));
//    }
      //drush_log(t("selected node id is {$nodeID}"), 'success');
//   }
}

function html_pre_replace_batch($itemList = array(),$updateNode='no', &$context) {
  new simple_html_dom();
  $sqlObject = new SqlQuery();
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_id'] = 1;
    $context['sandbox']['max'] = count($itemList);
    $context['sandbox']['items_count'] = 1;
    $context['results']['result_count'] = $context['sandbox']['max'];
    $context['results']['items'] = $itemList;
    $context['results']['nodeupdate'] = $updateNode;
    drush_print_r("Batch started for item count is {$context['sandbox']['max']}");
  }
  if ($context['sandbox']['max'] + 1 > 0) {
    $nodeID = array_pop($context['results']['items']);
    
    $node = Node::load($nodeID);
    
    $old_urls = $node->get('field_old_url')->getValue();
    $siteOldURl = 'http://cert.infoplease';
    if (isset($old_urls[0])) {
      $url = $siteOldURl . $old_urls[0]['value'];
      try {
        if ($context['results']['nodeupdate'] == 'no') {
          $page = file_get_contents($url);
          $sqlObject->UpdateNodePREIdsHtml('pre_html_pages', ['html' => $page], $nodeID);
        } else {
        $pageHtml = $sqlObject->fetchNodePREHtmlByIds($nodeID);
        $dochtml = new DOMDocument();
        $dochtml->loadHTML($pageHtml->html);
        
        // gets all DIVs
        $pres = $dochtml->getElementsByTagName('pre');

        // traverse the object with all DIVs
        foreach ($pres as $pre) {
          // gets, and outputs the ID and content of each DIV
          //$id = $pre->getAttribute('id');
          $url_pre[] = nl2br(trim($pre->nodeValue));
        }
        $html = str_get_html($node->body->value);
        //print_r($node->body->value); die;
        // find all image with full tag
        $node_pre = [];
        foreach ($html->find('.poem') as $e) {
          $node_pre[] = trim($e->innertext);
        }
        if (count($url_pre) == count($node_pre)) {
          $node->body = ['value' => str_replace($node_pre, $url_pre, $node->body->value), 'format' => 'full_html'];
        }
        $node->save();
        }
      }
      catch (\Exception $e) {
        drush_print(t("Can't open the URl : @url.", ['@url' => $url]));
      }

      $context['sandbox']['current_id'] = $context['sandbox']['progress'];
    $context['sandbox']['progress'] = $context['sandbox']['progress'] + $context['sandbox']['items_count'];
    //drush_print_r(['id' => $data->id, 'url' => $data->url, 'status' => $status, 'progress' => $context['sandbox']['progress']]);
    drush_log(t("Node ID {$nodeID} updated"),'success');
//    drush_log(t('ID is :id , Count :count , URL is :url ',[
//      ':id' => $data->id,
//      ':url'=>$data->url,
//      ':count'=>$context['sandbox']['progress']]), ($status=='success')?'success':'error');
    
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}
}



function HtmlPreReplaceBatch($itemsList = array(),$updateNode='No') {
  return array(
    'operations' => array(
      array('html_pre_replace_batch', array($itemsList,$updateNode))
    ),
    'finished' => 'html_pre_replace_batch_finished',
    'title' => t('HTML DOM Scraper'),
    'init_message' => t('Updation is starting.'),
    'progress_message' => t('Updating...'),
    'error_message' => t('Updation has encountered an error.'),
  );
}



/**
 * Call back function drush_custom_drush_command_say_hello()
 * The call back function name in the  following format
 *   drush_{module_name}_{item_id_for_command}()
 */
function drush_html_dom_scraper_dom_scraper() {
  $batch = null;
  drush_print('Welcome to "HTML DOM Scraper" Interface');
  $count = \Drupal::state()->get('ip_pages_count', 0);
  $choices = array(
    1 => 'Scrape HTML from URLs',
    2 => 'list the scrap URLs',
    3 => 'Migrate data from scraped html'
  );
  $selectedChoice = drush_choice($choices, dt("Choose the option for migration."));
  switch ($selectedChoice) {
    case 1:
      $selectedGroup = selectHDSGroupPrompt();
      list($start, $end) = limitHDSFPrompt();
      $itemsList = getItemsList($selectedGroup, $start, $end);
      if (count($itemsList) > 0) {
        $batch = HtmlDomScraperBatch_1($itemsList);
      }
      else {
        drush_log(t('No records found :)'), 'success');
      }
      break;
    case 2:
      drush_print("I choice " . $selectedChoice);
      break;
    case 3:
      $db = new SqlQuery();
      $groupName = selectHDSGroupPrompt();
      if ($groupName === false) {
        drush_print(dt('No group is selected'));
        return NULL;
      }
      $filterId = selectHDSFilterPrompt();
      drush_print_r($filterName);
      if ($filterId === false) {
        drush_print(dt('No filter is selected'));
        return NULL;
      }
      list($start, $end) = limitHDSFPrompt();
      $itemsList = getItemsList($groupName, $start, $end);
      $filter = $db->fetchFilterById($filterId);
      if (count($itemsList) > 0) {
        $batch = HtmlDomScraperBatch_3($itemsList, $filter);
      }else{
        drush_log(t('No records found :)'),'success');
      }
      break;
    default :
      break;
  }
  if ($batch !== NULL) {
    // Initialize the batch.
    batch_set($batch);
    // Start the batch process.
    drush_backend_batch_process();
  }
}

function HtmlDomScraperBatch_1($itemsList = array()) {
  return array(
    'operations' => array(
      array('html_dom_scraper_html_1_batch', array($itemsList))
    ),
    'finished' => 'html_dom_scrape_batch_finished',
    'title' => t('HTML DOM Scraper'),
    'init_message' => t('Updation is starting.'),
    'progress_message' => t('Updating...'),
    'error_message' => t('Updation has encountered an error.'),
  );
}

function HtmlDomScraperBatch_3($itemsList = array() , $filter = NULL) {
  return array(
    'operations' => array(
      array('html_dom_scraper_html_3_batch', array($itemsList,$filter))
    ),
    'finished' => 'html_dom_scrape_batch_finished',
    'title' => t('Trunk Pages Updation'),
    'init_message' => t('Updation is starting.'),
    'progress_message' => t('Updating users...'),
    'error_message' => t('Updation has encountered an error.'),
  );
}



function html_dom_scraper_html_1_batch($itemList = array(), &$context) {
  $sqlObject = new SqlQuery();
  new simple_html_dom();
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_id'] = 1;
    $context['sandbox']['max'] = count($itemList);
    $context['sandbox']['items_count'] = 1;
    $context['results']['result_count'] = $context['sandbox']['max'];
    $context['results']['items'] = $itemList;
    drush_print_r("Batch started for item count is {$context['sandbox']['max']}");
  }
  if ($context['sandbox']['max'] + 1 > 0) {
    $item = array_pop($context['results']['items']);
    $data = $sqlObject->fetchByRowId($item);
    $html = '';
    try {
      $ctx = stream_context_create(array(
        'http' => array(
          'timeout' => 200
        )
          )
      );
      $html = \Drupal\html_dom_scraper\Helper\file_get_html($data->url, 0, $ctx);
    }
    catch (\Exception $e) {      
      drush_print(t("Can't open the URl : @url.", ['@url' => $data->url]));
    }
    $html = ($html != '') ? $html : '';
    $status = ($html != '') ? 'success' : 'failure';
    $sqlObject->update($data->id, ['html' => $html, 'status' => $status]);

    $context['sandbox']['current_id'] = $context['sandbox']['progress'];
    $context['sandbox']['progress'] = $context['sandbox']['progress'] + $context['sandbox']['items_count'];
    //drush_print_r(['id' => $data->id, 'url' => $data->url, 'status' => $status, 'progress' => $context['sandbox']['progress']]);
    
    drush_log(t('ID is :id , Count :count , URL is :url ',[
      ':id' => $data->id,
      ':url'=>$data->url,
      ':count'=>$context['sandbox']['progress']]), ($status=='success')?'success':'error');
    
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function html_dom_scraper_html_3_batch($itemList = array(),$filter = NULL, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_id'] = 1;
    $context['sandbox']['max'] = count($itemList);
    $context['sandbox']['items_count'] = 1;
    $context['results']['result_count'] = $context['sandbox']['max'];
    $context['results']['items'] = $itemList;
    drush_print_r("Batch started for item count is {$context['sandbox']['max']}");
  }
  if ($context['sandbox']['max'] + 1 > 0) {
    $item = array_pop($context['results']['items']);

    $sqlObject = new SqlQuery();
    $data = $sqlObject->fetchByRowId($item);
    $domObject = new HtmlDomScraperHelper($filter, $data->html);
    $domObject->copyColumns($data);

    $table = $domObject->getTableName();
    $fields = $domObject->getTableColumnsData();
    if ($sqlObject->istableExist($table) === TRUE) {
      $result = $sqlObject->htmlDomFetchRow($table, $item);
      if ($result === FALSE) {
        $sqlObject->htmlDomInsertRow($table, $fields + ['dom_id' => $item]);
      }
      else {
        $sqlObject->htmlDomUpdateRow($table, $fields, $item);
      }
    }
    else {
      $sqlObject->update($item, ['json_html' => json_encode($fields)]);
    }
    $context['sandbox']['current_id'] = $context['sandbox']['progress'];
    $context['sandbox']['progress'] = $context['sandbox']['progress'] + $context['sandbox']['items_count'];
    drush_log(t('ID is :id , Count :count , URL is :url ',[
      ':id' => $data->id,
      ':url'=>$data->url,
      ':count'=>$context['sandbox']['progress']]), 'success');
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function html_dom_scrape_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Run batch successfully count : @result_count.', array('@result_count' => $results['result_count'])));
  }
}
